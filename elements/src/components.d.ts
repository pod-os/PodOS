/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface PosAddLiteralValue {
    }
    interface PosAddNewThing {
        "referenceUri": string;
    }
    interface PosApp {
        "restorePreviousSession": boolean;
    }
    interface PosAppBrowser {
        /**
          * The mode the app is running in:  - standalone:  use this when you deploy it as a standalone web application - pod: use this when you host this app as a default interface for you pod
         */
        "mode": 'standalone' | 'pod';
        "restorePreviousSession": boolean;
    }
    interface PosAppDashboard {
    }
    interface PosAppDocumentViewer {
    }
    interface PosAppGeneric {
    }
    interface PosAppImageViewer {
    }
    interface PosAppLdpContainer {
    }
    interface PosAppRdfDocument {
    }
    interface PosAppSettings {
    }
    interface PosContainerContents {
    }
    interface PosContainerItem {
    }
    interface PosDescription {
    }
    /**
     * Styled wrapper around native dialog element, with slots `title` and `content`
     */
    interface PosDialog {
        "close": () => Promise<void>;
        "showModal": () => Promise<void>;
    }
    interface PosDocument {
        "alt": string;
        "src": string;
    }
    interface PosErrorToast {
    }
    interface PosExampleResources {
    }
    interface PosGettingStarted {
    }
    /**
     * Tries fetch an image with the solid authentication, and can visualize http errors like 403 or 404 if this fails.
     * Falls back to classic <img src="..."> on network errors like CORS.
     * Renders a normal link if even this fails.
     */
    interface PosImage {
        "alt": string;
        /**
          * Use a blurred version of the image as its own background, if the image is scaled down to fit into the container.
         */
        "blurredBackground": boolean;
        "src": string;
    }
    interface PosInternalRouter {
        "uri": string;
    }
    interface PosLabel {
    }
    interface PosList {
        /**
          * URI of the predicate to follow
         */
        "rel": string;
    }
    interface PosLiterals {
    }
    interface PosLogin {
    }
    interface PosLoginForm {
    }
    interface PosMakeFindable {
        "uri": string;
    }
    interface PosNavigationBar {
        "uri": string;
    }
    interface PosNewThingForm {
        "referenceUri": string;
    }
    interface PosPicture {
        /**
          * Use a blurred version of the image as its own background, if the image is scaled down to fit into the container.
         */
        "blurredBackground": boolean;
    }
    interface PosPredicate {
        "label": string;
        "uri": string;
    }
    interface PosRelations {
    }
    interface PosResource {
        "fetch": () => Promise<void>;
        "lazy": boolean;
        "uri": string;
    }
    interface PosReverseRelations {
    }
    interface PosRichLink {
        "uri": string;
    }
    /**
     * The responsibility of pos-router is to handle the `uri` query param, that specifies the URI of the resource that is currently opened.
     * It reads this query param and informs other components about changes via the `pod-os:route-changed` event.
     * It also intercepts the URLs from `pod-os:link` events and pushes them as a new `uri` parameter.
     */
    interface PosRouter {
        /**
          * The mode defines what default URI will be used, if no URI param is given  - standalone: reroute to pod-os:dashboard - pod: reroute to the URI that is shown in the actual browser
         */
        "mode": 'standalone' | 'pod';
    }
    interface PosSelectTerm {
        "placeholder": string;
        "value": string;
    }
    interface PosSettingOfflineCache {
    }
    interface PosSubjects {
    }
    interface PosTypeBadges {
    }
    interface PosTypeRouter {
    }
    interface PosValue {
        /**
          * URI of the predicate to get the value from
         */
        "predicate": string;
    }
}
export interface PosAddLiteralValueCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosAddLiteralValueElement;
}
export interface PosAppCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosAppElement;
}
export interface PosAppDocumentViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosAppDocumentViewerElement;
}
export interface PosAppImageViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosAppImageViewerElement;
}
export interface PosContainerContentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosContainerContentsElement;
}
export interface PosContainerItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosContainerItemElement;
}
export interface PosDescriptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosDescriptionElement;
}
export interface PosDocumentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosDocumentElement;
}
export interface PosImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosImageElement;
}
export interface PosLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosLabelElement;
}
export interface PosListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosListElement;
}
export interface PosLiteralsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosLiteralsElement;
}
export interface PosLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosLoginElement;
}
export interface PosLoginFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosLoginFormElement;
}
export interface PosMakeFindableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosMakeFindableElement;
}
export interface PosNavigationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosNavigationBarElement;
}
export interface PosNewThingFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosNewThingFormElement;
}
export interface PosPictureCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosPictureElement;
}
export interface PosRelationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosRelationsElement;
}
export interface PosResourceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosResourceElement;
}
export interface PosReverseRelationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosReverseRelationsElement;
}
export interface PosRichLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosRichLinkElement;
}
export interface PosRouterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosRouterElement;
}
export interface PosSelectTermCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosSelectTermElement;
}
export interface PosSubjectsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosSubjectsElement;
}
export interface PosTypeBadgesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosTypeBadgesElement;
}
export interface PosTypeRouterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosTypeRouterElement;
}
export interface PosValueCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPosValueElement;
}
declare global {
    interface HTMLPosAddLiteralValueElementEventMap {
        "pod-os:init": any;
        "pod-os:resource": any;
        "pod-os:added-literal-value": any;
        "pod-os:error": any;
    }
    interface HTMLPosAddLiteralValueElement extends Components.PosAddLiteralValue, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosAddLiteralValueElementEventMap>(type: K, listener: (this: HTMLPosAddLiteralValueElement, ev: PosAddLiteralValueCustomEvent<HTMLPosAddLiteralValueElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosAddLiteralValueElementEventMap>(type: K, listener: (this: HTMLPosAddLiteralValueElement, ev: PosAddLiteralValueCustomEvent<HTMLPosAddLiteralValueElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosAddLiteralValueElement: {
        prototype: HTMLPosAddLiteralValueElement;
        new (): HTMLPosAddLiteralValueElement;
    };
    interface HTMLPosAddNewThingElement extends Components.PosAddNewThing, HTMLStencilElement {
    }
    var HTMLPosAddNewThingElement: {
        prototype: HTMLPosAddNewThingElement;
        new (): HTMLPosAddNewThingElement;
    };
    interface HTMLPosAppElementEventMap {
        "pod-os:session-restored": { url: string };
    }
    interface HTMLPosAppElement extends Components.PosApp, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosAppElementEventMap>(type: K, listener: (this: HTMLPosAppElement, ev: PosAppCustomEvent<HTMLPosAppElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosAppElementEventMap>(type: K, listener: (this: HTMLPosAppElement, ev: PosAppCustomEvent<HTMLPosAppElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosAppElement: {
        prototype: HTMLPosAppElement;
        new (): HTMLPosAppElement;
    };
    interface HTMLPosAppBrowserElement extends Components.PosAppBrowser, HTMLStencilElement {
    }
    var HTMLPosAppBrowserElement: {
        prototype: HTMLPosAppBrowserElement;
        new (): HTMLPosAppBrowserElement;
    };
    interface HTMLPosAppDashboardElement extends Components.PosAppDashboard, HTMLStencilElement {
    }
    var HTMLPosAppDashboardElement: {
        prototype: HTMLPosAppDashboardElement;
        new (): HTMLPosAppDashboardElement;
    };
    interface HTMLPosAppDocumentViewerElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosAppDocumentViewerElement extends Components.PosAppDocumentViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosAppDocumentViewerElementEventMap>(type: K, listener: (this: HTMLPosAppDocumentViewerElement, ev: PosAppDocumentViewerCustomEvent<HTMLPosAppDocumentViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosAppDocumentViewerElementEventMap>(type: K, listener: (this: HTMLPosAppDocumentViewerElement, ev: PosAppDocumentViewerCustomEvent<HTMLPosAppDocumentViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosAppDocumentViewerElement: {
        prototype: HTMLPosAppDocumentViewerElement;
        new (): HTMLPosAppDocumentViewerElement;
    };
    interface HTMLPosAppGenericElement extends Components.PosAppGeneric, HTMLStencilElement {
    }
    var HTMLPosAppGenericElement: {
        prototype: HTMLPosAppGenericElement;
        new (): HTMLPosAppGenericElement;
    };
    interface HTMLPosAppImageViewerElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosAppImageViewerElement extends Components.PosAppImageViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosAppImageViewerElementEventMap>(type: K, listener: (this: HTMLPosAppImageViewerElement, ev: PosAppImageViewerCustomEvent<HTMLPosAppImageViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosAppImageViewerElementEventMap>(type: K, listener: (this: HTMLPosAppImageViewerElement, ev: PosAppImageViewerCustomEvent<HTMLPosAppImageViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosAppImageViewerElement: {
        prototype: HTMLPosAppImageViewerElement;
        new (): HTMLPosAppImageViewerElement;
    };
    interface HTMLPosAppLdpContainerElement extends Components.PosAppLdpContainer, HTMLStencilElement {
    }
    var HTMLPosAppLdpContainerElement: {
        prototype: HTMLPosAppLdpContainerElement;
        new (): HTMLPosAppLdpContainerElement;
    };
    interface HTMLPosAppRdfDocumentElement extends Components.PosAppRdfDocument, HTMLStencilElement {
    }
    var HTMLPosAppRdfDocumentElement: {
        prototype: HTMLPosAppRdfDocumentElement;
        new (): HTMLPosAppRdfDocumentElement;
    };
    interface HTMLPosAppSettingsElement extends Components.PosAppSettings, HTMLStencilElement {
    }
    var HTMLPosAppSettingsElement: {
        prototype: HTMLPosAppSettingsElement;
        new (): HTMLPosAppSettingsElement;
    };
    interface HTMLPosContainerContentsElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosContainerContentsElement extends Components.PosContainerContents, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosContainerContentsElementEventMap>(type: K, listener: (this: HTMLPosContainerContentsElement, ev: PosContainerContentsCustomEvent<HTMLPosContainerContentsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosContainerContentsElementEventMap>(type: K, listener: (this: HTMLPosContainerContentsElement, ev: PosContainerContentsCustomEvent<HTMLPosContainerContentsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosContainerContentsElement: {
        prototype: HTMLPosContainerContentsElement;
        new (): HTMLPosContainerContentsElement;
    };
    interface HTMLPosContainerItemElementEventMap {
        "pod-os:link": any;
        "pod-os:resource": any;
    }
    interface HTMLPosContainerItemElement extends Components.PosContainerItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosContainerItemElementEventMap>(type: K, listener: (this: HTMLPosContainerItemElement, ev: PosContainerItemCustomEvent<HTMLPosContainerItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosContainerItemElementEventMap>(type: K, listener: (this: HTMLPosContainerItemElement, ev: PosContainerItemCustomEvent<HTMLPosContainerItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosContainerItemElement: {
        prototype: HTMLPosContainerItemElement;
        new (): HTMLPosContainerItemElement;
    };
    interface HTMLPosDescriptionElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosDescriptionElement extends Components.PosDescription, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosDescriptionElementEventMap>(type: K, listener: (this: HTMLPosDescriptionElement, ev: PosDescriptionCustomEvent<HTMLPosDescriptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosDescriptionElementEventMap>(type: K, listener: (this: HTMLPosDescriptionElement, ev: PosDescriptionCustomEvent<HTMLPosDescriptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosDescriptionElement: {
        prototype: HTMLPosDescriptionElement;
        new (): HTMLPosDescriptionElement;
    };
    /**
     * Styled wrapper around native dialog element, with slots `title` and `content`
     */
    interface HTMLPosDialogElement extends Components.PosDialog, HTMLStencilElement {
    }
    var HTMLPosDialogElement: {
        prototype: HTMLPosDialogElement;
        new (): HTMLPosDialogElement;
    };
    interface HTMLPosDocumentElementEventMap {
        "pod-os:init": any;
        "pod-os:resource-loaded": string;
    }
    interface HTMLPosDocumentElement extends Components.PosDocument, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosDocumentElementEventMap>(type: K, listener: (this: HTMLPosDocumentElement, ev: PosDocumentCustomEvent<HTMLPosDocumentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosDocumentElementEventMap>(type: K, listener: (this: HTMLPosDocumentElement, ev: PosDocumentCustomEvent<HTMLPosDocumentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosDocumentElement: {
        prototype: HTMLPosDocumentElement;
        new (): HTMLPosDocumentElement;
    };
    interface HTMLPosErrorToastElement extends Components.PosErrorToast, HTMLStencilElement {
    }
    var HTMLPosErrorToastElement: {
        prototype: HTMLPosErrorToastElement;
        new (): HTMLPosErrorToastElement;
    };
    interface HTMLPosExampleResourcesElement extends Components.PosExampleResources, HTMLStencilElement {
    }
    var HTMLPosExampleResourcesElement: {
        prototype: HTMLPosExampleResourcesElement;
        new (): HTMLPosExampleResourcesElement;
    };
    interface HTMLPosGettingStartedElement extends Components.PosGettingStarted, HTMLStencilElement {
    }
    var HTMLPosGettingStartedElement: {
        prototype: HTMLPosGettingStartedElement;
        new (): HTMLPosGettingStartedElement;
    };
    interface HTMLPosImageElementEventMap {
        "pod-os:init": any;
        "pod-os:resource-loaded": string;
    }
    /**
     * Tries fetch an image with the solid authentication, and can visualize http errors like 403 or 404 if this fails.
     * Falls back to classic <img src="..."> on network errors like CORS.
     * Renders a normal link if even this fails.
     */
    interface HTMLPosImageElement extends Components.PosImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosImageElementEventMap>(type: K, listener: (this: HTMLPosImageElement, ev: PosImageCustomEvent<HTMLPosImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosImageElementEventMap>(type: K, listener: (this: HTMLPosImageElement, ev: PosImageCustomEvent<HTMLPosImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosImageElement: {
        prototype: HTMLPosImageElement;
        new (): HTMLPosImageElement;
    };
    interface HTMLPosInternalRouterElement extends Components.PosInternalRouter, HTMLStencilElement {
    }
    var HTMLPosInternalRouterElement: {
        prototype: HTMLPosInternalRouterElement;
        new (): HTMLPosInternalRouterElement;
    };
    interface HTMLPosLabelElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosLabelElement extends Components.PosLabel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosLabelElementEventMap>(type: K, listener: (this: HTMLPosLabelElement, ev: PosLabelCustomEvent<HTMLPosLabelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosLabelElementEventMap>(type: K, listener: (this: HTMLPosLabelElement, ev: PosLabelCustomEvent<HTMLPosLabelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosLabelElement: {
        prototype: HTMLPosLabelElement;
        new (): HTMLPosLabelElement;
    };
    interface HTMLPosListElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosListElement extends Components.PosList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosListElementEventMap>(type: K, listener: (this: HTMLPosListElement, ev: PosListCustomEvent<HTMLPosListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosListElementEventMap>(type: K, listener: (this: HTMLPosListElement, ev: PosListCustomEvent<HTMLPosListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosListElement: {
        prototype: HTMLPosListElement;
        new (): HTMLPosListElement;
    };
    interface HTMLPosLiteralsElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosLiteralsElement extends Components.PosLiterals, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosLiteralsElementEventMap>(type: K, listener: (this: HTMLPosLiteralsElement, ev: PosLiteralsCustomEvent<HTMLPosLiteralsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosLiteralsElementEventMap>(type: K, listener: (this: HTMLPosLiteralsElement, ev: PosLiteralsCustomEvent<HTMLPosLiteralsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosLiteralsElement: {
        prototype: HTMLPosLiteralsElement;
        new (): HTMLPosLiteralsElement;
    };
    interface HTMLPosLoginElementEventMap {
        "pod-os:init": any;
    }
    interface HTMLPosLoginElement extends Components.PosLogin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosLoginElementEventMap>(type: K, listener: (this: HTMLPosLoginElement, ev: PosLoginCustomEvent<HTMLPosLoginElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosLoginElementEventMap>(type: K, listener: (this: HTMLPosLoginElement, ev: PosLoginCustomEvent<HTMLPosLoginElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosLoginElement: {
        prototype: HTMLPosLoginElement;
        new (): HTMLPosLoginElement;
    };
    interface HTMLPosLoginFormElementEventMap {
        "pod-os:idp-url-selected": any;
    }
    interface HTMLPosLoginFormElement extends Components.PosLoginForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosLoginFormElementEventMap>(type: K, listener: (this: HTMLPosLoginFormElement, ev: PosLoginFormCustomEvent<HTMLPosLoginFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosLoginFormElementEventMap>(type: K, listener: (this: HTMLPosLoginFormElement, ev: PosLoginFormCustomEvent<HTMLPosLoginFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosLoginFormElement: {
        prototype: HTMLPosLoginFormElement;
        new (): HTMLPosLoginFormElement;
    };
    interface HTMLPosMakeFindableElementEventMap {
        "pod-os:init": any;
        "pod-os:error": any;
        "pod-os:search:index-updated": any;
        "pod-os:search:index-created": any;
    }
    interface HTMLPosMakeFindableElement extends Components.PosMakeFindable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosMakeFindableElementEventMap>(type: K, listener: (this: HTMLPosMakeFindableElement, ev: PosMakeFindableCustomEvent<HTMLPosMakeFindableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosMakeFindableElementEventMap>(type: K, listener: (this: HTMLPosMakeFindableElement, ev: PosMakeFindableCustomEvent<HTMLPosMakeFindableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosMakeFindableElement: {
        prototype: HTMLPosMakeFindableElement;
        new (): HTMLPosMakeFindableElement;
    };
    interface HTMLPosNavigationBarElementEventMap {
        "pod-os:init": any;
        "pod-os:link": any;
    }
    interface HTMLPosNavigationBarElement extends Components.PosNavigationBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosNavigationBarElementEventMap>(type: K, listener: (this: HTMLPosNavigationBarElement, ev: PosNavigationBarCustomEvent<HTMLPosNavigationBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosNavigationBarElementEventMap>(type: K, listener: (this: HTMLPosNavigationBarElement, ev: PosNavigationBarCustomEvent<HTMLPosNavigationBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosNavigationBarElement: {
        prototype: HTMLPosNavigationBarElement;
        new (): HTMLPosNavigationBarElement;
    };
    interface HTMLPosNewThingFormElementEventMap {
        "pod-os:link": any;
        "pod-os:error": any;
        "pod-os:init": any;
    }
    interface HTMLPosNewThingFormElement extends Components.PosNewThingForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosNewThingFormElementEventMap>(type: K, listener: (this: HTMLPosNewThingFormElement, ev: PosNewThingFormCustomEvent<HTMLPosNewThingFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosNewThingFormElementEventMap>(type: K, listener: (this: HTMLPosNewThingFormElement, ev: PosNewThingFormCustomEvent<HTMLPosNewThingFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosNewThingFormElement: {
        prototype: HTMLPosNewThingFormElement;
        new (): HTMLPosNewThingFormElement;
    };
    interface HTMLPosPictureElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosPictureElement extends Components.PosPicture, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosPictureElementEventMap>(type: K, listener: (this: HTMLPosPictureElement, ev: PosPictureCustomEvent<HTMLPosPictureElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosPictureElementEventMap>(type: K, listener: (this: HTMLPosPictureElement, ev: PosPictureCustomEvent<HTMLPosPictureElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosPictureElement: {
        prototype: HTMLPosPictureElement;
        new (): HTMLPosPictureElement;
    };
    interface HTMLPosPredicateElement extends Components.PosPredicate, HTMLStencilElement {
    }
    var HTMLPosPredicateElement: {
        prototype: HTMLPosPredicateElement;
        new (): HTMLPosPredicateElement;
    };
    interface HTMLPosRelationsElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosRelationsElement extends Components.PosRelations, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosRelationsElementEventMap>(type: K, listener: (this: HTMLPosRelationsElement, ev: PosRelationsCustomEvent<HTMLPosRelationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosRelationsElementEventMap>(type: K, listener: (this: HTMLPosRelationsElement, ev: PosRelationsCustomEvent<HTMLPosRelationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosRelationsElement: {
        prototype: HTMLPosRelationsElement;
        new (): HTMLPosRelationsElement;
    };
    interface HTMLPosResourceElementEventMap {
        "pod-os:init": any;
        "pod-os:resource-loaded": any;
    }
    interface HTMLPosResourceElement extends Components.PosResource, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosResourceElementEventMap>(type: K, listener: (this: HTMLPosResourceElement, ev: PosResourceCustomEvent<HTMLPosResourceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosResourceElementEventMap>(type: K, listener: (this: HTMLPosResourceElement, ev: PosResourceCustomEvent<HTMLPosResourceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosResourceElement: {
        prototype: HTMLPosResourceElement;
        new (): HTMLPosResourceElement;
    };
    interface HTMLPosReverseRelationsElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosReverseRelationsElement extends Components.PosReverseRelations, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosReverseRelationsElementEventMap>(type: K, listener: (this: HTMLPosReverseRelationsElement, ev: PosReverseRelationsCustomEvent<HTMLPosReverseRelationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosReverseRelationsElementEventMap>(type: K, listener: (this: HTMLPosReverseRelationsElement, ev: PosReverseRelationsCustomEvent<HTMLPosReverseRelationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosReverseRelationsElement: {
        prototype: HTMLPosReverseRelationsElement;
        new (): HTMLPosReverseRelationsElement;
    };
    interface HTMLPosRichLinkElementEventMap {
        "pod-os:link": any;
    }
    interface HTMLPosRichLinkElement extends Components.PosRichLink, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosRichLinkElementEventMap>(type: K, listener: (this: HTMLPosRichLinkElement, ev: PosRichLinkCustomEvent<HTMLPosRichLinkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosRichLinkElementEventMap>(type: K, listener: (this: HTMLPosRichLinkElement, ev: PosRichLinkCustomEvent<HTMLPosRichLinkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosRichLinkElement: {
        prototype: HTMLPosRichLinkElement;
        new (): HTMLPosRichLinkElement;
    };
    interface HTMLPosRouterElementEventMap {
        "pod-os:route-changed": string;
    }
    /**
     * The responsibility of pos-router is to handle the `uri` query param, that specifies the URI of the resource that is currently opened.
     * It reads this query param and informs other components about changes via the `pod-os:route-changed` event.
     * It also intercepts the URLs from `pod-os:link` events and pushes them as a new `uri` parameter.
     */
    interface HTMLPosRouterElement extends Components.PosRouter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosRouterElementEventMap>(type: K, listener: (this: HTMLPosRouterElement, ev: PosRouterCustomEvent<HTMLPosRouterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosRouterElementEventMap>(type: K, listener: (this: HTMLPosRouterElement, ev: PosRouterCustomEvent<HTMLPosRouterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosRouterElement: {
        prototype: HTMLPosRouterElement;
        new (): HTMLPosRouterElement;
    };
    interface HTMLPosSelectTermElementEventMap {
        "pod-os:init": any;
        "pod-os:term-selected": any;
    }
    interface HTMLPosSelectTermElement extends Components.PosSelectTerm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosSelectTermElementEventMap>(type: K, listener: (this: HTMLPosSelectTermElement, ev: PosSelectTermCustomEvent<HTMLPosSelectTermElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosSelectTermElementEventMap>(type: K, listener: (this: HTMLPosSelectTermElement, ev: PosSelectTermCustomEvent<HTMLPosSelectTermElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosSelectTermElement: {
        prototype: HTMLPosSelectTermElement;
        new (): HTMLPosSelectTermElement;
    };
    interface HTMLPosSettingOfflineCacheElement extends Components.PosSettingOfflineCache, HTMLStencilElement {
    }
    var HTMLPosSettingOfflineCacheElement: {
        prototype: HTMLPosSettingOfflineCacheElement;
        new (): HTMLPosSettingOfflineCacheElement;
    };
    interface HTMLPosSubjectsElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosSubjectsElement extends Components.PosSubjects, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosSubjectsElementEventMap>(type: K, listener: (this: HTMLPosSubjectsElement, ev: PosSubjectsCustomEvent<HTMLPosSubjectsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosSubjectsElementEventMap>(type: K, listener: (this: HTMLPosSubjectsElement, ev: PosSubjectsCustomEvent<HTMLPosSubjectsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosSubjectsElement: {
        prototype: HTMLPosSubjectsElement;
        new (): HTMLPosSubjectsElement;
    };
    interface HTMLPosTypeBadgesElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosTypeBadgesElement extends Components.PosTypeBadges, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosTypeBadgesElementEventMap>(type: K, listener: (this: HTMLPosTypeBadgesElement, ev: PosTypeBadgesCustomEvent<HTMLPosTypeBadgesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosTypeBadgesElementEventMap>(type: K, listener: (this: HTMLPosTypeBadgesElement, ev: PosTypeBadgesCustomEvent<HTMLPosTypeBadgesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosTypeBadgesElement: {
        prototype: HTMLPosTypeBadgesElement;
        new (): HTMLPosTypeBadgesElement;
    };
    interface HTMLPosTypeRouterElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosTypeRouterElement extends Components.PosTypeRouter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosTypeRouterElementEventMap>(type: K, listener: (this: HTMLPosTypeRouterElement, ev: PosTypeRouterCustomEvent<HTMLPosTypeRouterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosTypeRouterElementEventMap>(type: K, listener: (this: HTMLPosTypeRouterElement, ev: PosTypeRouterCustomEvent<HTMLPosTypeRouterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosTypeRouterElement: {
        prototype: HTMLPosTypeRouterElement;
        new (): HTMLPosTypeRouterElement;
    };
    interface HTMLPosValueElementEventMap {
        "pod-os:resource": any;
    }
    interface HTMLPosValueElement extends Components.PosValue, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPosValueElementEventMap>(type: K, listener: (this: HTMLPosValueElement, ev: PosValueCustomEvent<HTMLPosValueElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPosValueElementEventMap>(type: K, listener: (this: HTMLPosValueElement, ev: PosValueCustomEvent<HTMLPosValueElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPosValueElement: {
        prototype: HTMLPosValueElement;
        new (): HTMLPosValueElement;
    };
    interface HTMLElementTagNameMap {
        "pos-add-literal-value": HTMLPosAddLiteralValueElement;
        "pos-add-new-thing": HTMLPosAddNewThingElement;
        "pos-app": HTMLPosAppElement;
        "pos-app-browser": HTMLPosAppBrowserElement;
        "pos-app-dashboard": HTMLPosAppDashboardElement;
        "pos-app-document-viewer": HTMLPosAppDocumentViewerElement;
        "pos-app-generic": HTMLPosAppGenericElement;
        "pos-app-image-viewer": HTMLPosAppImageViewerElement;
        "pos-app-ldp-container": HTMLPosAppLdpContainerElement;
        "pos-app-rdf-document": HTMLPosAppRdfDocumentElement;
        "pos-app-settings": HTMLPosAppSettingsElement;
        "pos-container-contents": HTMLPosContainerContentsElement;
        "pos-container-item": HTMLPosContainerItemElement;
        "pos-description": HTMLPosDescriptionElement;
        "pos-dialog": HTMLPosDialogElement;
        "pos-document": HTMLPosDocumentElement;
        "pos-error-toast": HTMLPosErrorToastElement;
        "pos-example-resources": HTMLPosExampleResourcesElement;
        "pos-getting-started": HTMLPosGettingStartedElement;
        "pos-image": HTMLPosImageElement;
        "pos-internal-router": HTMLPosInternalRouterElement;
        "pos-label": HTMLPosLabelElement;
        "pos-list": HTMLPosListElement;
        "pos-literals": HTMLPosLiteralsElement;
        "pos-login": HTMLPosLoginElement;
        "pos-login-form": HTMLPosLoginFormElement;
        "pos-make-findable": HTMLPosMakeFindableElement;
        "pos-navigation-bar": HTMLPosNavigationBarElement;
        "pos-new-thing-form": HTMLPosNewThingFormElement;
        "pos-picture": HTMLPosPictureElement;
        "pos-predicate": HTMLPosPredicateElement;
        "pos-relations": HTMLPosRelationsElement;
        "pos-resource": HTMLPosResourceElement;
        "pos-reverse-relations": HTMLPosReverseRelationsElement;
        "pos-rich-link": HTMLPosRichLinkElement;
        "pos-router": HTMLPosRouterElement;
        "pos-select-term": HTMLPosSelectTermElement;
        "pos-setting-offline-cache": HTMLPosSettingOfflineCacheElement;
        "pos-subjects": HTMLPosSubjectsElement;
        "pos-type-badges": HTMLPosTypeBadgesElement;
        "pos-type-router": HTMLPosTypeRouterElement;
        "pos-value": HTMLPosValueElement;
    }
}
declare namespace LocalJSX {
    interface PosAddLiteralValue {
        /**
          * The entered literal value has been added to the resource and successfully stored to the Pod.
         */
        "onPod-os:added-literal-value"?: (event: PosAddLiteralValueCustomEvent<any>) => void;
        /**
          * Something went wrong while adding the literal value.
         */
        "onPod-os:error"?: (event: PosAddLiteralValueCustomEvent<any>) => void;
        "onPod-os:init"?: (event: PosAddLiteralValueCustomEvent<any>) => void;
        "onPod-os:resource"?: (event: PosAddLiteralValueCustomEvent<any>) => void;
    }
    interface PosAddNewThing {
        "referenceUri": string;
    }
    interface PosApp {
        /**
          * Fired whenever the session was restored
         */
        "onPod-os:session-restored"?: (event: PosAppCustomEvent<{ url: string }>) => void;
        "restorePreviousSession"?: boolean;
    }
    interface PosAppBrowser {
        /**
          * The mode the app is running in:  - standalone:  use this when you deploy it as a standalone web application - pod: use this when you host this app as a default interface for you pod
         */
        "mode"?: 'standalone' | 'pod';
        "restorePreviousSession"?: boolean;
    }
    interface PosAppDashboard {
    }
    interface PosAppDocumentViewer {
        "onPod-os:resource"?: (event: PosAppDocumentViewerCustomEvent<any>) => void;
    }
    interface PosAppGeneric {
    }
    interface PosAppImageViewer {
        "onPod-os:resource"?: (event: PosAppImageViewerCustomEvent<any>) => void;
    }
    interface PosAppLdpContainer {
    }
    interface PosAppRdfDocument {
    }
    interface PosAppSettings {
    }
    interface PosContainerContents {
        "onPod-os:resource"?: (event: PosContainerContentsCustomEvent<any>) => void;
    }
    interface PosContainerItem {
        "onPod-os:link"?: (event: PosContainerItemCustomEvent<any>) => void;
        "onPod-os:resource"?: (event: PosContainerItemCustomEvent<any>) => void;
    }
    interface PosDescription {
        "onPod-os:resource"?: (event: PosDescriptionCustomEvent<any>) => void;
    }
    /**
     * Styled wrapper around native dialog element, with slots `title` and `content`
     */
    interface PosDialog {
    }
    interface PosDocument {
        "alt"?: string;
        "onPod-os:init"?: (event: PosDocumentCustomEvent<any>) => void;
        /**
          * Indicates that the resource given in `src` property has been loaded.
         */
        "onPod-os:resource-loaded"?: (event: PosDocumentCustomEvent<string>) => void;
        "src"?: string;
    }
    interface PosErrorToast {
    }
    interface PosExampleResources {
    }
    interface PosGettingStarted {
    }
    /**
     * Tries fetch an image with the solid authentication, and can visualize http errors like 403 or 404 if this fails.
     * Falls back to classic <img src="..."> on network errors like CORS.
     * Renders a normal link if even this fails.
     */
    interface PosImage {
        "alt"?: string;
        /**
          * Use a blurred version of the image as its own background, if the image is scaled down to fit into the container.
         */
        "blurredBackground"?: boolean;
        "onPod-os:init"?: (event: PosImageCustomEvent<any>) => void;
        /**
          * Indicates that the resource given in `src` property has been loaded.
         */
        "onPod-os:resource-loaded"?: (event: PosImageCustomEvent<string>) => void;
        "src"?: string;
    }
    interface PosInternalRouter {
        "uri"?: string;
    }
    interface PosLabel {
        "onPod-os:resource"?: (event: PosLabelCustomEvent<any>) => void;
    }
    interface PosList {
        "onPod-os:resource"?: (event: PosListCustomEvent<any>) => void;
        /**
          * URI of the predicate to follow
         */
        "rel"?: string;
    }
    interface PosLiterals {
        "onPod-os:resource"?: (event: PosLiteralsCustomEvent<any>) => void;
    }
    interface PosLogin {
        "onPod-os:init"?: (event: PosLoginCustomEvent<any>) => void;
    }
    interface PosLoginForm {
        /**
          * Emits the selected IDP URL to use for login
         */
        "onPod-os:idp-url-selected"?: (event: PosLoginFormCustomEvent<any>) => void;
    }
    interface PosMakeFindable {
        "onPod-os:error"?: (event: PosMakeFindableCustomEvent<any>) => void;
        "onPod-os:init"?: (event: PosMakeFindableCustomEvent<any>) => void;
        "onPod-os:search:index-created"?: (event: PosMakeFindableCustomEvent<any>) => void;
        "onPod-os:search:index-updated"?: (event: PosMakeFindableCustomEvent<any>) => void;
        "uri": string;
    }
    interface PosNavigationBar {
        "onPod-os:init"?: (event: PosNavigationBarCustomEvent<any>) => void;
        "onPod-os:link"?: (event: PosNavigationBarCustomEvent<any>) => void;
        "uri"?: string;
    }
    interface PosNewThingForm {
        "onPod-os:error"?: (event: PosNewThingFormCustomEvent<any>) => void;
        "onPod-os:init"?: (event: PosNewThingFormCustomEvent<any>) => void;
        "onPod-os:link"?: (event: PosNewThingFormCustomEvent<any>) => void;
        "referenceUri": string;
    }
    interface PosPicture {
        /**
          * Use a blurred version of the image as its own background, if the image is scaled down to fit into the container.
         */
        "blurredBackground"?: boolean;
        "onPod-os:resource"?: (event: PosPictureCustomEvent<any>) => void;
    }
    interface PosPredicate {
        "label"?: string;
        "uri"?: string;
    }
    interface PosRelations {
        "onPod-os:resource"?: (event: PosRelationsCustomEvent<any>) => void;
    }
    interface PosResource {
        "lazy"?: boolean;
        "onPod-os:init"?: (event: PosResourceCustomEvent<any>) => void;
        /**
          * Indicates that the resource given in `uri` property has been loaded.
         */
        "onPod-os:resource-loaded"?: (event: PosResourceCustomEvent<any>) => void;
        "uri"?: string;
    }
    interface PosReverseRelations {
        "onPod-os:resource"?: (event: PosReverseRelationsCustomEvent<any>) => void;
    }
    interface PosRichLink {
        "onPod-os:link"?: (event: PosRichLinkCustomEvent<any>) => void;
        "uri"?: string;
    }
    /**
     * The responsibility of pos-router is to handle the `uri` query param, that specifies the URI of the resource that is currently opened.
     * It reads this query param and informs other components about changes via the `pod-os:route-changed` event.
     * It also intercepts the URLs from `pod-os:link` events and pushes them as a new `uri` parameter.
     */
    interface PosRouter {
        /**
          * The mode defines what default URI will be used, if no URI param is given  - standalone: reroute to pod-os:dashboard - pod: reroute to the URI that is shown in the actual browser
         */
        "mode"?: 'standalone' | 'pod';
        /**
          * Emits the new URI that is active
         */
        "onPod-os:route-changed"?: (event: PosRouterCustomEvent<string>) => void;
    }
    interface PosSelectTerm {
        "onPod-os:init"?: (event: PosSelectTermCustomEvent<any>) => void;
        /**
          * Fires when a term is entered or selected
         */
        "onPod-os:term-selected"?: (event: PosSelectTermCustomEvent<any>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface PosSettingOfflineCache {
    }
    interface PosSubjects {
        "onPod-os:resource"?: (event: PosSubjectsCustomEvent<any>) => void;
    }
    interface PosTypeBadges {
        "onPod-os:resource"?: (event: PosTypeBadgesCustomEvent<any>) => void;
    }
    interface PosTypeRouter {
        "onPod-os:resource"?: (event: PosTypeRouterCustomEvent<any>) => void;
    }
    interface PosValue {
        "onPod-os:resource"?: (event: PosValueCustomEvent<any>) => void;
        /**
          * URI of the predicate to get the value from
         */
        "predicate"?: string;
    }
    interface IntrinsicElements {
        "pos-add-literal-value": PosAddLiteralValue;
        "pos-add-new-thing": PosAddNewThing;
        "pos-app": PosApp;
        "pos-app-browser": PosAppBrowser;
        "pos-app-dashboard": PosAppDashboard;
        "pos-app-document-viewer": PosAppDocumentViewer;
        "pos-app-generic": PosAppGeneric;
        "pos-app-image-viewer": PosAppImageViewer;
        "pos-app-ldp-container": PosAppLdpContainer;
        "pos-app-rdf-document": PosAppRdfDocument;
        "pos-app-settings": PosAppSettings;
        "pos-container-contents": PosContainerContents;
        "pos-container-item": PosContainerItem;
        "pos-description": PosDescription;
        "pos-dialog": PosDialog;
        "pos-document": PosDocument;
        "pos-error-toast": PosErrorToast;
        "pos-example-resources": PosExampleResources;
        "pos-getting-started": PosGettingStarted;
        "pos-image": PosImage;
        "pos-internal-router": PosInternalRouter;
        "pos-label": PosLabel;
        "pos-list": PosList;
        "pos-literals": PosLiterals;
        "pos-login": PosLogin;
        "pos-login-form": PosLoginForm;
        "pos-make-findable": PosMakeFindable;
        "pos-navigation-bar": PosNavigationBar;
        "pos-new-thing-form": PosNewThingForm;
        "pos-picture": PosPicture;
        "pos-predicate": PosPredicate;
        "pos-relations": PosRelations;
        "pos-resource": PosResource;
        "pos-reverse-relations": PosReverseRelations;
        "pos-rich-link": PosRichLink;
        "pos-router": PosRouter;
        "pos-select-term": PosSelectTerm;
        "pos-setting-offline-cache": PosSettingOfflineCache;
        "pos-subjects": PosSubjects;
        "pos-type-badges": PosTypeBadges;
        "pos-type-router": PosTypeRouter;
        "pos-value": PosValue;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pos-add-literal-value": LocalJSX.PosAddLiteralValue & JSXBase.HTMLAttributes<HTMLPosAddLiteralValueElement>;
            "pos-add-new-thing": LocalJSX.PosAddNewThing & JSXBase.HTMLAttributes<HTMLPosAddNewThingElement>;
            "pos-app": LocalJSX.PosApp & JSXBase.HTMLAttributes<HTMLPosAppElement>;
            "pos-app-browser": LocalJSX.PosAppBrowser & JSXBase.HTMLAttributes<HTMLPosAppBrowserElement>;
            "pos-app-dashboard": LocalJSX.PosAppDashboard & JSXBase.HTMLAttributes<HTMLPosAppDashboardElement>;
            "pos-app-document-viewer": LocalJSX.PosAppDocumentViewer & JSXBase.HTMLAttributes<HTMLPosAppDocumentViewerElement>;
            "pos-app-generic": LocalJSX.PosAppGeneric & JSXBase.HTMLAttributes<HTMLPosAppGenericElement>;
            "pos-app-image-viewer": LocalJSX.PosAppImageViewer & JSXBase.HTMLAttributes<HTMLPosAppImageViewerElement>;
            "pos-app-ldp-container": LocalJSX.PosAppLdpContainer & JSXBase.HTMLAttributes<HTMLPosAppLdpContainerElement>;
            "pos-app-rdf-document": LocalJSX.PosAppRdfDocument & JSXBase.HTMLAttributes<HTMLPosAppRdfDocumentElement>;
            "pos-app-settings": LocalJSX.PosAppSettings & JSXBase.HTMLAttributes<HTMLPosAppSettingsElement>;
            "pos-container-contents": LocalJSX.PosContainerContents & JSXBase.HTMLAttributes<HTMLPosContainerContentsElement>;
            "pos-container-item": LocalJSX.PosContainerItem & JSXBase.HTMLAttributes<HTMLPosContainerItemElement>;
            "pos-description": LocalJSX.PosDescription & JSXBase.HTMLAttributes<HTMLPosDescriptionElement>;
            /**
             * Styled wrapper around native dialog element, with slots `title` and `content`
             */
            "pos-dialog": LocalJSX.PosDialog & JSXBase.HTMLAttributes<HTMLPosDialogElement>;
            "pos-document": LocalJSX.PosDocument & JSXBase.HTMLAttributes<HTMLPosDocumentElement>;
            "pos-error-toast": LocalJSX.PosErrorToast & JSXBase.HTMLAttributes<HTMLPosErrorToastElement>;
            "pos-example-resources": LocalJSX.PosExampleResources & JSXBase.HTMLAttributes<HTMLPosExampleResourcesElement>;
            "pos-getting-started": LocalJSX.PosGettingStarted & JSXBase.HTMLAttributes<HTMLPosGettingStartedElement>;
            /**
             * Tries fetch an image with the solid authentication, and can visualize http errors like 403 or 404 if this fails.
             * Falls back to classic <img src="..."> on network errors like CORS.
             * Renders a normal link if even this fails.
             */
            "pos-image": LocalJSX.PosImage & JSXBase.HTMLAttributes<HTMLPosImageElement>;
            "pos-internal-router": LocalJSX.PosInternalRouter & JSXBase.HTMLAttributes<HTMLPosInternalRouterElement>;
            "pos-label": LocalJSX.PosLabel & JSXBase.HTMLAttributes<HTMLPosLabelElement>;
            "pos-list": LocalJSX.PosList & JSXBase.HTMLAttributes<HTMLPosListElement>;
            "pos-literals": LocalJSX.PosLiterals & JSXBase.HTMLAttributes<HTMLPosLiteralsElement>;
            "pos-login": LocalJSX.PosLogin & JSXBase.HTMLAttributes<HTMLPosLoginElement>;
            "pos-login-form": LocalJSX.PosLoginForm & JSXBase.HTMLAttributes<HTMLPosLoginFormElement>;
            "pos-make-findable": LocalJSX.PosMakeFindable & JSXBase.HTMLAttributes<HTMLPosMakeFindableElement>;
            "pos-navigation-bar": LocalJSX.PosNavigationBar & JSXBase.HTMLAttributes<HTMLPosNavigationBarElement>;
            "pos-new-thing-form": LocalJSX.PosNewThingForm & JSXBase.HTMLAttributes<HTMLPosNewThingFormElement>;
            "pos-picture": LocalJSX.PosPicture & JSXBase.HTMLAttributes<HTMLPosPictureElement>;
            "pos-predicate": LocalJSX.PosPredicate & JSXBase.HTMLAttributes<HTMLPosPredicateElement>;
            "pos-relations": LocalJSX.PosRelations & JSXBase.HTMLAttributes<HTMLPosRelationsElement>;
            "pos-resource": LocalJSX.PosResource & JSXBase.HTMLAttributes<HTMLPosResourceElement>;
            "pos-reverse-relations": LocalJSX.PosReverseRelations & JSXBase.HTMLAttributes<HTMLPosReverseRelationsElement>;
            "pos-rich-link": LocalJSX.PosRichLink & JSXBase.HTMLAttributes<HTMLPosRichLinkElement>;
            /**
             * The responsibility of pos-router is to handle the `uri` query param, that specifies the URI of the resource that is currently opened.
             * It reads this query param and informs other components about changes via the `pod-os:route-changed` event.
             * It also intercepts the URLs from `pod-os:link` events and pushes them as a new `uri` parameter.
             */
            "pos-router": LocalJSX.PosRouter & JSXBase.HTMLAttributes<HTMLPosRouterElement>;
            "pos-select-term": LocalJSX.PosSelectTerm & JSXBase.HTMLAttributes<HTMLPosSelectTermElement>;
            "pos-setting-offline-cache": LocalJSX.PosSettingOfflineCache & JSXBase.HTMLAttributes<HTMLPosSettingOfflineCacheElement>;
            "pos-subjects": LocalJSX.PosSubjects & JSXBase.HTMLAttributes<HTMLPosSubjectsElement>;
            "pos-type-badges": LocalJSX.PosTypeBadges & JSXBase.HTMLAttributes<HTMLPosTypeBadgesElement>;
            "pos-type-router": LocalJSX.PosTypeRouter & JSXBase.HTMLAttributes<HTMLPosTypeRouterElement>;
            "pos-value": LocalJSX.PosValue & JSXBase.HTMLAttributes<HTMLPosValueElement>;
        }
    }
}
